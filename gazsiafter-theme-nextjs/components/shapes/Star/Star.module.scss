@use "../../../styles/settings" as *;
@use "../../../styles/mixins" as *;
@use "../../../styles/functions" as *;

$-width: 946;
$-height: 696;
$-scale-normal: 0.45;
$-scale-eyeTrippy: 0.56;
$-scale-eyeClosed: 0.35;
$-scale-clickSqueeze: 0.95;
$-scale-mobile: $-scale-normal * $size-scale-mobile-star;
$-shape-star-initial: squeezed;

:export {
  starPulsingTime: $speed-star-pulsingTransition;
  starSquaringTime: $speed-star-squaringTransition;
  starSlowGrowingTime: $speed-star-slowGrowth;
  slowGrowingStarUIChangesDelayTime: $speed-ui-animationDelay-slowGrowingStarOverlays;
}

// These polygon values should match the corresponding
// polygon values in Star.utils.js
@mixin _star-polygon($shape) {
  @if $shape == squeezed {
    clip-path: polygon(
      23% 17% /* Shrunk */,
      41% 31%,
      50% 1%,
      59% 31%,
      77% 17% /* Shrunk */,
      77% 38%,
      98% 50%,
      77% 62%,
      77% 85% /* Shrunk */,
      59% 69%,
      50% 97%,
      41% 69%,
      23% 85% /* Shrunk */,
      25% 62%,
      1% 50%,
      25% 38%
    );
  }

  @if $shape == expanded {
    clip-path: polygon(
      19% 13% /* Full */,
      41% 31%,
      50% 5%,
      59% 31%,
      81% 13% /* Full */,
      77% 38%,
      94% 50%,
      77% 62%,
      81% 89% /* Full */,
      59% 69%,
      50% 93%,
      41% 69%,
      19% 89% /* Full */,
      25% 62%,
      5% 50%,
      25% 38%
    );
  }

  @if $shape == square {
    clip-path: polygon(
      23% 0% /* Shrunk */,
      41% 0%,
      50% 0%,
      59% 0%,
      77% 0% /* Shrunk */,
      100% 0%,
      100% 50%,
      100% 62%,
      100% 100% /* Shrunk */,
      59% 100%,
      50% 100%,
      41% 100%,
      0% 100% /* Shrunk */,
      0% 62%,
      0% 50%,
      0% 0%
    );
  }
}

.wrapper {
  position: absolute;
  height: $-height * $-scale-normal + px;
  aspect-ratio: $-width / $-height;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: top $speed-star-squaringTransition, width $speed-star-slowGrowth,
    height $speed-star-slowGrowth, background-color $speed-ui-general-normal;
  z-index: $level-layer-low + 1;

  &.isSquaringIn,
  &.isSquared {
    max-width: 90%;

    &,
    &.isSquaringOut {
      transition: all $speed-star-squaringTransition,
        background-color $speed-ui-general-normal;
    }

    @include screen-orientation(portrait) {
      top: $positionTop-mainActor-portrait;
    }
  }

  @include screens-smaller-than(md) {
    height: $-height * $-scale-mobile + px;
  }

  &.haveDropsBeenTriggered {
    animation: clickSqueeze $speed-eye-blink ease-in-out forwards;
  }

  &.isFullPage {
    height: 290vh;
    z-index: $level-layer-middle + 1;
  }

  &.isEyeTripping {
    height: $-height * $-scale-eyeTrippy + px;
  }

  &.isHoverShrinking {
    height: $-height * $-scale-eyeClosed + px;
  }

  &.isSquaringIn {
    .main {
      animation: squareIn $speed-star-squaringTransition ease-in-out forwards;
    }
  }

  &.isSquared {
    z-index: $level-layer-middle + 1;

    .main {
      animation: squareIn paused;
    }
  }

  &.isSquaringOut {
    .main {
      animation: squareOut $speed-star-squaringTransition ease-in-out forwards;
    }
  }

  .main {
    &,
    &:before {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      animation: star $speed-star-pulsingTransition ease-in-out infinite
        alternate-reverse;
    }

    &:before {
      content: "";
      @include background-glitch-layer("/images/texture_6.png");
      z-index: -1;
    }

    .contentWrapper {
      width: 100%;
      height: 100%;
    }

    // THEME-DEPENDENT COLORING:
    @each $theme-name in get-theme-names() {
      &.#{$theme-name} {
        background: get-color($theme-name, "star");
      }
    }
  }
}

@keyframes clickSqueeze {
  from {
    transform: translate(-50%, -50%) scale($-scale-clickSqueeze);
  }
  to {
    transform: translate(-50%, -50%) scale(1);
  }
}

@keyframes star {
  from {
    @include _star-polygon(expanded);
  }

  to {
    @include _star-polygon($-shape-star-initial);
  }
}

@keyframes squareIn {
  from {
    @include _star-polygon($-shape-star-initial);
  }

  to {
    @include _star-polygon(square);
  }
}

@keyframes squareOut {
  from {
    @include _star-polygon(square);
  }

  to {
    @include _star-polygon($-shape-star-initial);
  }
}
